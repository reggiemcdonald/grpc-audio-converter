// Code generated by protoc-gen-go. DO NOT EDIT.
// source: convert.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Encoding int32

const (
	// TODO: Add more file types
	Encoding_WAV  Encoding = 0
	Encoding_M4A  Encoding = 1
	Encoding_MP3  Encoding = 2
	Encoding_FLAC Encoding = 3
)

var Encoding_name = map[int32]string{
	0: "WAV",
	1: "M4A",
	2: "MP3",
	3: "FLAC",
}

var Encoding_value = map[string]int32{
	"WAV":  0,
	"M4A":  1,
	"MP3":  2,
	"FLAC": 3,
}

func (x Encoding) String() string {
	return proto.EnumName(Encoding_name, int32(x))
}

func (Encoding) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_28744cb449e70622, []int{0}
}

type ConvertFileQueryResponse_Status int32

const (
	ConvertFileQueryResponse_QUEUED     ConvertFileQueryResponse_Status = 0
	ConvertFileQueryResponse_CONVERTING ConvertFileQueryResponse_Status = 1
	ConvertFileQueryResponse_COMPLETED  ConvertFileQueryResponse_Status = 2
	ConvertFileQueryResponse_FAILED     ConvertFileQueryResponse_Status = 3
)

var ConvertFileQueryResponse_Status_name = map[int32]string{
	0: "QUEUED",
	1: "CONVERTING",
	2: "COMPLETED",
	3: "FAILED",
}

var ConvertFileQueryResponse_Status_value = map[string]int32{
	"QUEUED":     0,
	"CONVERTING": 1,
	"COMPLETED":  2,
	"FAILED":     3,
}

func (x ConvertFileQueryResponse_Status) String() string {
	return proto.EnumName(ConvertFileQueryResponse_Status_name, int32(x))
}

func (ConvertFileQueryResponse_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_28744cb449e70622, []int{3, 0}
}

//
// A message that represents a request to convert
// audio at bucketSource/keySource from encodingSource
// to audio at bucketDest/keyDest in encodingDest
type ConvertFileRequest struct {
	SourceUrl            string   `protobuf:"bytes,1,opt,name=sourceUrl,proto3" json:"sourceUrl,omitempty"`
	SourceEncoding       Encoding `protobuf:"varint,6,opt,name=sourceEncoding,proto3,enum=pb.Encoding" json:"sourceEncoding,omitempty"`
	DestEncoding         Encoding `protobuf:"varint,7,opt,name=destEncoding,proto3,enum=pb.Encoding" json:"destEncoding,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConvertFileRequest) Reset()         { *m = ConvertFileRequest{} }
func (m *ConvertFileRequest) String() string { return proto.CompactTextString(m) }
func (*ConvertFileRequest) ProtoMessage()    {}
func (*ConvertFileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_28744cb449e70622, []int{0}
}

func (m *ConvertFileRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConvertFileRequest.Unmarshal(m, b)
}
func (m *ConvertFileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConvertFileRequest.Marshal(b, m, deterministic)
}
func (m *ConvertFileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConvertFileRequest.Merge(m, src)
}
func (m *ConvertFileRequest) XXX_Size() int {
	return xxx_messageInfo_ConvertFileRequest.Size(m)
}
func (m *ConvertFileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConvertFileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConvertFileRequest proto.InternalMessageInfo

func (m *ConvertFileRequest) GetSourceUrl() string {
	if m != nil {
		return m.SourceUrl
	}
	return ""
}

func (m *ConvertFileRequest) GetSourceEncoding() Encoding {
	if m != nil {
		return m.SourceEncoding
	}
	return Encoding_WAV
}

func (m *ConvertFileRequest) GetDestEncoding() Encoding {
	if m != nil {
		return m.DestEncoding
	}
	return Encoding_WAV
}

//
// A response returned from convert file indicating
// whether the request was accepted, and a unique identifier
type ConvertFileResponse struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Accepted             bool     `protobuf:"varint,2,opt,name=accepted,proto3" json:"accepted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConvertFileResponse) Reset()         { *m = ConvertFileResponse{} }
func (m *ConvertFileResponse) String() string { return proto.CompactTextString(m) }
func (*ConvertFileResponse) ProtoMessage()    {}
func (*ConvertFileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_28744cb449e70622, []int{1}
}

func (m *ConvertFileResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConvertFileResponse.Unmarshal(m, b)
}
func (m *ConvertFileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConvertFileResponse.Marshal(b, m, deterministic)
}
func (m *ConvertFileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConvertFileResponse.Merge(m, src)
}
func (m *ConvertFileResponse) XXX_Size() int {
	return xxx_messageInfo_ConvertFileResponse.Size(m)
}
func (m *ConvertFileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConvertFileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConvertFileResponse proto.InternalMessageInfo

func (m *ConvertFileResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ConvertFileResponse) GetAccepted() bool {
	if m != nil {
		return m.Accepted
	}
	return false
}

//
// A request to the Converter service to lookup
// the status of a job
type ConvertFileQueryRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConvertFileQueryRequest) Reset()         { *m = ConvertFileQueryRequest{} }
func (m *ConvertFileQueryRequest) String() string { return proto.CompactTextString(m) }
func (*ConvertFileQueryRequest) ProtoMessage()    {}
func (*ConvertFileQueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_28744cb449e70622, []int{2}
}

func (m *ConvertFileQueryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConvertFileQueryRequest.Unmarshal(m, b)
}
func (m *ConvertFileQueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConvertFileQueryRequest.Marshal(b, m, deterministic)
}
func (m *ConvertFileQueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConvertFileQueryRequest.Merge(m, src)
}
func (m *ConvertFileQueryRequest) XXX_Size() int {
	return xxx_messageInfo_ConvertFileQueryRequest.Size(m)
}
func (m *ConvertFileQueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConvertFileQueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConvertFileQueryRequest proto.InternalMessageInfo

func (m *ConvertFileQueryRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

//
// A response from the Converter service that contains
// the id of the job, and its current status
type ConvertFileQueryResponse struct {
	Id                   string                          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status               ConvertFileQueryResponse_Status `protobuf:"varint,2,opt,name=status,proto3,enum=pb.ConvertFileQueryResponse_Status" json:"status,omitempty"`
	Url                  string                          `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *ConvertFileQueryResponse) Reset()         { *m = ConvertFileQueryResponse{} }
func (m *ConvertFileQueryResponse) String() string { return proto.CompactTextString(m) }
func (*ConvertFileQueryResponse) ProtoMessage()    {}
func (*ConvertFileQueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_28744cb449e70622, []int{3}
}

func (m *ConvertFileQueryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConvertFileQueryResponse.Unmarshal(m, b)
}
func (m *ConvertFileQueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConvertFileQueryResponse.Marshal(b, m, deterministic)
}
func (m *ConvertFileQueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConvertFileQueryResponse.Merge(m, src)
}
func (m *ConvertFileQueryResponse) XXX_Size() int {
	return xxx_messageInfo_ConvertFileQueryResponse.Size(m)
}
func (m *ConvertFileQueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConvertFileQueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConvertFileQueryResponse proto.InternalMessageInfo

func (m *ConvertFileQueryResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ConvertFileQueryResponse) GetStatus() ConvertFileQueryResponse_Status {
	if m != nil {
		return m.Status
	}
	return ConvertFileQueryResponse_QUEUED
}

func (m *ConvertFileQueryResponse) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

//
// A request to convert a buffer of audio data
// from sourceEncoding to destEncoding
type ConvertStreamRequest struct {
	Buff                 []byte   `protobuf:"bytes,1,opt,name=buff,proto3" json:"buff,omitempty"`
	SourceEncoding       Encoding `protobuf:"varint,2,opt,name=sourceEncoding,proto3,enum=pb.Encoding" json:"sourceEncoding,omitempty"`
	DestEncoding         Encoding `protobuf:"varint,3,opt,name=destEncoding,proto3,enum=pb.Encoding" json:"destEncoding,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConvertStreamRequest) Reset()         { *m = ConvertStreamRequest{} }
func (m *ConvertStreamRequest) String() string { return proto.CompactTextString(m) }
func (*ConvertStreamRequest) ProtoMessage()    {}
func (*ConvertStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_28744cb449e70622, []int{4}
}

func (m *ConvertStreamRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConvertStreamRequest.Unmarshal(m, b)
}
func (m *ConvertStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConvertStreamRequest.Marshal(b, m, deterministic)
}
func (m *ConvertStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConvertStreamRequest.Merge(m, src)
}
func (m *ConvertStreamRequest) XXX_Size() int {
	return xxx_messageInfo_ConvertStreamRequest.Size(m)
}
func (m *ConvertStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConvertStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConvertStreamRequest proto.InternalMessageInfo

func (m *ConvertStreamRequest) GetBuff() []byte {
	if m != nil {
		return m.Buff
	}
	return nil
}

func (m *ConvertStreamRequest) GetSourceEncoding() Encoding {
	if m != nil {
		return m.SourceEncoding
	}
	return Encoding_WAV
}

func (m *ConvertStreamRequest) GetDestEncoding() Encoding {
	if m != nil {
		return m.DestEncoding
	}
	return Encoding_WAV
}

//
// A convert stream response containing the converted buffer
type ConvertStreamResponse struct {
	Buff                 []byte   `protobuf:"bytes,1,opt,name=buff,proto3" json:"buff,omitempty"`
	Encoding             Encoding `protobuf:"varint,2,opt,name=encoding,proto3,enum=pb.Encoding" json:"encoding,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConvertStreamResponse) Reset()         { *m = ConvertStreamResponse{} }
func (m *ConvertStreamResponse) String() string { return proto.CompactTextString(m) }
func (*ConvertStreamResponse) ProtoMessage()    {}
func (*ConvertStreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_28744cb449e70622, []int{5}
}

func (m *ConvertStreamResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConvertStreamResponse.Unmarshal(m, b)
}
func (m *ConvertStreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConvertStreamResponse.Marshal(b, m, deterministic)
}
func (m *ConvertStreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConvertStreamResponse.Merge(m, src)
}
func (m *ConvertStreamResponse) XXX_Size() int {
	return xxx_messageInfo_ConvertStreamResponse.Size(m)
}
func (m *ConvertStreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConvertStreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConvertStreamResponse proto.InternalMessageInfo

func (m *ConvertStreamResponse) GetBuff() []byte {
	if m != nil {
		return m.Buff
	}
	return nil
}

func (m *ConvertStreamResponse) GetEncoding() Encoding {
	if m != nil {
		return m.Encoding
	}
	return Encoding_WAV
}

func init() {
	proto.RegisterEnum("pb.Encoding", Encoding_name, Encoding_value)
	proto.RegisterEnum("pb.ConvertFileQueryResponse_Status", ConvertFileQueryResponse_Status_name, ConvertFileQueryResponse_Status_value)
	proto.RegisterType((*ConvertFileRequest)(nil), "pb.ConvertFileRequest")
	proto.RegisterType((*ConvertFileResponse)(nil), "pb.ConvertFileResponse")
	proto.RegisterType((*ConvertFileQueryRequest)(nil), "pb.ConvertFileQueryRequest")
	proto.RegisterType((*ConvertFileQueryResponse)(nil), "pb.ConvertFileQueryResponse")
	proto.RegisterType((*ConvertStreamRequest)(nil), "pb.ConvertStreamRequest")
	proto.RegisterType((*ConvertStreamResponse)(nil), "pb.ConvertStreamResponse")
}

func init() {
	proto.RegisterFile("convert.proto", fileDescriptor_28744cb449e70622)
}

var fileDescriptor_28744cb449e70622 = []byte{
	// 450 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0xcd, 0x6e, 0x9b, 0x40,
	0x10, 0xce, 0x42, 0x44, 0xf0, 0xd4, 0x46, 0xab, 0xe9, 0x4f, 0xa8, 0x9b, 0x83, 0x45, 0x2f, 0x6e,
	0x0f, 0x6e, 0xe5, 0xe4, 0x56, 0xa9, 0x15, 0x32, 0xb8, 0x8a, 0x64, 0xe7, 0x07, 0x87, 0xf4, 0x6c,
	0x60, 0x53, 0x21, 0xb9, 0x40, 0x97, 0x25, 0x52, 0x5f, 0xa3, 0xc7, 0x3e, 0x4a, 0x5f, 0xa8, 0xaf,
	0x51, 0xf1, 0x63, 0x6a, 0x08, 0x49, 0xa5, 0xdc, 0x66, 0x67, 0xbf, 0xf9, 0xe6, 0x9b, 0xf9, 0x76,
	0x61, 0xe0, 0xc7, 0xd1, 0x2d, 0xe3, 0x62, 0x92, 0xf0, 0x58, 0xc4, 0x28, 0x25, 0x9e, 0xf1, 0x8b,
	0x00, 0xce, 0xca, 0xec, 0x3c, 0xdc, 0x30, 0x87, 0x7d, 0xcf, 0x58, 0x2a, 0xf0, 0x08, 0x7a, 0x69,
	0x9c, 0x71, 0x9f, 0xb9, 0x7c, 0xa3, 0x93, 0x11, 0x19, 0xf7, 0x9c, 0x7f, 0x09, 0x3c, 0x01, 0xad,
	0x3c, 0xd8, 0x91, 0x1f, 0x07, 0x61, 0xf4, 0x55, 0x57, 0x46, 0x64, 0xac, 0x4d, 0xfb, 0x93, 0xc4,
	0x9b, 0x6c, 0x73, 0x4e, 0x0b, 0x83, 0xef, 0xa1, 0x1f, 0xb0, 0x54, 0xd4, 0x35, 0x07, 0x1d, 0x35,
	0x0d, 0x84, 0x61, 0xc2, 0xd3, 0x86, 0xb6, 0x34, 0x89, 0xa3, 0x94, 0xa1, 0x06, 0x52, 0x18, 0x54,
	0xaa, 0xa4, 0x30, 0xc0, 0x21, 0xa8, 0x6b, 0xdf, 0x67, 0x89, 0x60, 0x81, 0x2e, 0x8d, 0xc8, 0x58,
	0x75, 0xea, 0xb3, 0xf1, 0x06, 0x0e, 0x77, 0x28, 0x2e, 0x33, 0xc6, 0x7f, 0x6c, 0x67, 0x6c, 0xd1,
	0x18, 0xbf, 0x09, 0xe8, 0x77, 0xb1, 0xf7, 0xf4, 0xfc, 0x00, 0x4a, 0x2a, 0xd6, 0x22, 0x4b, 0x8b,
	0x8e, 0xda, 0xf4, 0x75, 0x3e, 0xc6, 0x7d, 0xd5, 0x93, 0x55, 0x01, 0x75, 0xaa, 0x12, 0xa4, 0x20,
	0x67, 0x7c, 0xa3, 0xcb, 0x05, 0x5b, 0x1e, 0x1a, 0x9f, 0x40, 0x29, 0x31, 0x08, 0xa0, 0x5c, 0xba,
	0xb6, 0x6b, 0x5b, 0x74, 0x0f, 0x35, 0x80, 0xd9, 0xf9, 0xd9, 0xb5, 0xed, 0x5c, 0x9d, 0x9e, 0x7d,
	0xa6, 0x04, 0x07, 0xd0, 0x9b, 0x9d, 0x2f, 0x2f, 0x16, 0xf6, 0x95, 0x6d, 0x51, 0x29, 0x87, 0xce,
	0xcd, 0xd3, 0x85, 0x6d, 0x51, 0xd9, 0xf8, 0x49, 0xe0, 0x59, 0xd5, 0x7e, 0x25, 0x38, 0x5b, 0x7f,
	0xdb, 0x4e, 0x89, 0xb0, 0xef, 0x65, 0x37, 0x37, 0x85, 0xf4, 0xbe, 0x53, 0xc4, 0x1d, 0xfe, 0x49,
	0x8f, 0xf0, 0x4f, 0xfe, 0xaf, 0x7f, 0x2e, 0x3c, 0x6f, 0x69, 0xaa, 0xb6, 0xd9, 0x25, 0x6a, 0x0c,
	0x2a, 0x7b, 0x48, 0x4e, 0x7d, 0xfb, 0xf6, 0x1d, 0xa8, 0xb5, 0xa8, 0x03, 0x90, 0xbf, 0x98, 0xd7,
	0x74, 0x2f, 0x0f, 0x96, 0x27, 0x26, 0x25, 0x45, 0x70, 0x71, 0x4c, 0x25, 0x54, 0x61, 0x7f, 0xbe,
	0x30, 0x67, 0x54, 0x9e, 0xfe, 0x21, 0x40, 0x2b, 0x21, 0x8c, 0xaf, 0x18, 0xbf, 0x0d, 0x7d, 0x86,
	0x1f, 0xe1, 0xc9, 0x8e, 0x5f, 0xf8, 0xa2, 0x65, 0x60, 0xb5, 0xbf, 0xe1, 0xe1, 0x9d, 0x7c, 0x35,
	0xc3, 0xb2, 0xe6, 0xac, 0xfd, 0xc6, 0x57, 0xdd, 0xaf, 0xa0, 0x64, 0x3a, 0x7a, 0xe8, 0x89, 0xa0,
	0x05, 0x83, 0xc6, 0xae, 0x50, 0xdf, 0x81, 0x37, 0x2c, 0x1d, 0xbe, 0xec, 0xb8, 0x29, 0x59, 0x3c,
	0xa5, 0xf8, 0xd9, 0xc7, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xb5, 0x42, 0x3a, 0x08, 0xea, 0x03,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ConverterServiceClient is the client API for ConverterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConverterServiceClient interface {
	//
	// Create a file encoding conversion job from S3
	ConvertFile(ctx context.Context, in *ConvertFileRequest, opts ...grpc.CallOption) (*ConvertFileResponse, error)
	//
	// Lookup the status of a job
	ConvertFileQuery(ctx context.Context, in *ConvertFileQueryRequest, opts ...grpc.CallOption) (*ConvertFileQueryResponse, error)
	//
	// Stream an audio file to the conversion service for real-time conversion
	ConvertStream(ctx context.Context, in *ConvertStreamRequest, opts ...grpc.CallOption) (*ConvertStreamResponse, error)
}

type converterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConverterServiceClient(cc grpc.ClientConnInterface) ConverterServiceClient {
	return &converterServiceClient{cc}
}

func (c *converterServiceClient) ConvertFile(ctx context.Context, in *ConvertFileRequest, opts ...grpc.CallOption) (*ConvertFileResponse, error) {
	out := new(ConvertFileResponse)
	err := c.cc.Invoke(ctx, "/pb.ConverterService/ConvertFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *converterServiceClient) ConvertFileQuery(ctx context.Context, in *ConvertFileQueryRequest, opts ...grpc.CallOption) (*ConvertFileQueryResponse, error) {
	out := new(ConvertFileQueryResponse)
	err := c.cc.Invoke(ctx, "/pb.ConverterService/ConvertFileQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *converterServiceClient) ConvertStream(ctx context.Context, in *ConvertStreamRequest, opts ...grpc.CallOption) (*ConvertStreamResponse, error) {
	out := new(ConvertStreamResponse)
	err := c.cc.Invoke(ctx, "/pb.ConverterService/ConvertStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConverterServiceServer is the server API for ConverterService service.
type ConverterServiceServer interface {
	//
	// Create a file encoding conversion job from S3
	ConvertFile(context.Context, *ConvertFileRequest) (*ConvertFileResponse, error)
	//
	// Lookup the status of a job
	ConvertFileQuery(context.Context, *ConvertFileQueryRequest) (*ConvertFileQueryResponse, error)
	//
	// Stream an audio file to the conversion service for real-time conversion
	ConvertStream(context.Context, *ConvertStreamRequest) (*ConvertStreamResponse, error)
}

// UnimplementedConverterServiceServer can be embedded to have forward compatible implementations.
type UnimplementedConverterServiceServer struct {
}

func (*UnimplementedConverterServiceServer) ConvertFile(ctx context.Context, req *ConvertFileRequest) (*ConvertFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertFile not implemented")
}
func (*UnimplementedConverterServiceServer) ConvertFileQuery(ctx context.Context, req *ConvertFileQueryRequest) (*ConvertFileQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertFileQuery not implemented")
}
func (*UnimplementedConverterServiceServer) ConvertStream(ctx context.Context, req *ConvertStreamRequest) (*ConvertStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertStream not implemented")
}

func RegisterConverterServiceServer(s *grpc.Server, srv ConverterServiceServer) {
	s.RegisterService(&_ConverterService_serviceDesc, srv)
}

func _ConverterService_ConvertFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConvertFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConverterServiceServer).ConvertFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ConverterService/ConvertFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConverterServiceServer).ConvertFile(ctx, req.(*ConvertFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConverterService_ConvertFileQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConvertFileQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConverterServiceServer).ConvertFileQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ConverterService/ConvertFileQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConverterServiceServer).ConvertFileQuery(ctx, req.(*ConvertFileQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConverterService_ConvertStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConvertStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConverterServiceServer).ConvertStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ConverterService/ConvertStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConverterServiceServer).ConvertStream(ctx, req.(*ConvertStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConverterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ConverterService",
	HandlerType: (*ConverterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConvertFile",
			Handler:    _ConverterService_ConvertFile_Handler,
		},
		{
			MethodName: "ConvertFileQuery",
			Handler:    _ConverterService_ConvertFileQuery_Handler,
		},
		{
			MethodName: "ConvertStream",
			Handler:    _ConverterService_ConvertStream_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "convert.proto",
}
