syntax = "proto3";

package pb;

enum Encoding {
    // TODO: Add more file types
    WAV  = 0;
    M4A  = 1;
    MP3  = 2;
    FLAC = 3;
}

/*
 * A message that represents a request to convert
 * audio at bucketSource/keySource from encodingSource
 * to audio at bucketDest/keyDest in encodingDest
 */
message ConvertS3FileRequest {
    string sourceBucket     = 1;
    string sourceKey        = 2;
    string destBucket       = 3;
    string destKey          = 4;
    Encoding sourceEncoding = 5;
    Encoding destEncoding   = 6;
}

/*
 * A response returned from convert file indicating
 * whether the request was accepted, and a unique identifier
 */
message ConvertS3FileResponse {
    bool accepted = 1;
    string id     = 2;
}

/*
 * A request to the Converter service to lookup
 * the status of a job
 */
message ConvertS3FileQueryRequest {
    string id = 1;
}

/*
 * A response from the Converter service that contains
 * the id of the job, and its current status
 */
message ConvertS3FileQueryResponse {
    string id       = 1;
    enum Status {
        QUEUED      = 0;
        CONVERTING  = 1;
        COMPLETED   = 2;
        FAILED      = 3;
    }
    Status status   = 2;
}

/*
 * A request to convert a buffer of audio data
 * from sourceEncoding to destEncoding
 */
message ConvertStreamRequest {
    bytes buff              = 1;
    Encoding sourceEncoding = 2;
    Encoding destEncoding   = 3;
}

/*
 * A convert stream response containing the converted buffer
 */
message ConvertStreamResponse {
    bytes buff        = 1;
    Encoding encoding = 2;
}

/*
 * The Converter Service
 */
service ConverterService {
    /*
     * Create a file encoding conversion job from S3
     */
    rpc ConvertS3File (ConvertS3FileRequest) returns (ConvertS3FileResponse);

    /*
     * Lookup the status of a job
     */
    rpc ConvertS3FileQuery(ConvertS3FileQueryRequest) returns (ConvertS3FileQueryResponse);

    /*
     * Stream an audio file to the conversion service for real-time conversion
     */
    rpc ConvertStream(ConvertStreamRequest)       returns (ConvertStreamResponse);
}